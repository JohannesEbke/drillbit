#!/usr/bin/python
# encoding: ISO8859-1
"""
Copyright (c)2011, Hideyuki Tanaka

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of Hideyuki Tanaka nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""


import os, subprocess, sys
from waflib.TaskGen import before, after, feature
from waflib import Options, Task, Utils, Logs, Errors
from fnmatch import fnmatch

C1 = '#XXX'
C2 = '#YYY'
UNPACK_DIR = '.lua'

def cleanup():
  import shutil
  try: shutil.rmtree(UNPACK_DIR)
  except OSError: pass

def unpack_lua(conf):
  cwd = os.getcwd()

  fname = __file__
  if fname.endswith('.pyc'):
    fname = fname[0:-1]
  f = open(fname, 'rb')

  while 1:
    line = f.readline()
    if not line:
      Logs.error('not contain gtest archive')
      sys.exit(1)
    if line == '#==>\n':
      txt = f.readline()
      if not txt:
        Logs.error('corrupt archive')
      if f.readline() != '#<==\n':
        Logs.error('corrupt archive')
      break

  txt = txt[1:-1].replace(C1, '\n').replace(C2, '\r')

  cleanup()

  tmp = 't.tar.bz2'

  os.makedirs(UNPACK_DIR)
  os.chdir(UNPACK_DIR)
  t = open(tmp, 'wb')
  t.write(txt)
  t.close()

  try:
    subprocess.check_call(['tar',  'xf', tmp])
  except:
    os.chdir(cwd)
    cleanup()
    Logs.error('lua cannot be unpacked.')

  os.chdir("lua-5.2.1")
  try:
    subprocess.check_call(['make',  'linux'])
  except:
    os.chdir(cwd)
    cleanup()
    Logs.error('lua cannot be built.')
  os.chdir("..")

  os.unlink(tmp)
  conf.env.LUA = os.path.join(os.path.abspath(os.getcwd()), "lua-5.2.1/src/lua")
  os.chdir(cwd)

def configure(conf):
    luapath = os.path.join(os.path.abspath(UNPACK_DIR), "lua-5.2.1/src/lua")
    if os.path.exists(luapath):
        conf.env.LUA = luapath
    else:
        try:
            unpack_lua(conf)
            conf.msg('Unpacking lua', 'yes')
        except:
            conf.msg('Unpacking lua', 'no')
            Logs.error(sys.exc_info()[1])

